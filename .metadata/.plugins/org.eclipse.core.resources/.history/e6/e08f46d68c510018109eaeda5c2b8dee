/*
 * SOUND_PLAYER.c
 *
 *  Created on: May 6, 2018
 *      Author: edson
 */

#include "SOUND_PLAYER.h"


void PIT_config(void)
{
    pit_config_t pit_config;
    PIT_GetDefaultConfig(&pit_config);
    //CLOCK_EnableClock(kCLOCK_Pit0);
    //MCR
    PIT_Init(PIT, &pit_config);
//    PIT_SetTimerPeriod(PIT, kPIT_Chnl_0, CLOCK_GetBusClkFreq()*(1.5));
    /* Set timer period for channel 0 */
    PIT_SetTimerPeriod(PIT, kPIT_Chnl_0, USEC_TO_COUNT(1000000U, CLOCK_GetFreq(kCLOCK_BusClk)));
//    PIT_SetTimerPeriod(PIT, kPIT_Chnl_0, CLOCK_GetBusClkFreq());
    PIT_GetStatusFlags(PIT, kPIT_Chnl_0);
    PIT_StartTimer(PIT, kPIT_Chnl_0);
    PIT_EnableInterrupts(PIT, kPIT_Chnl_0, kPIT_TimerInterruptEnable);
    NVIC_EnableIRQ(PIT0_IRQn);
}

void DAC_config(void)
{
        dac_config_t dacConfigStruct;

        /* Configure the DAC. */
        /*
         * dacConfigStruct.referenceVoltageSource = kDAC_ReferenceVoltageSourceVref2;
         * dacConfigStruct.enableLowPowerMode = false;
         */
        DAC_GetDefaultConfig(&dacConfigStruct);
        DAC_Init(DEMO_DAC_BASEADDR, &dacConfigStruct);
        DAC_Enable(DEMO_DAC_BASEADDR, true); /* Enable output. */
}

static void audio_player(void*arg)
{
//	event = xEventGroupCreate();
//	PIT_config();
    pit_config_t pit_config;
    PIT_GetDefaultConfig(&pit_config);
    //CLOCK_EnableClock(kCLOCK_Pit0);
    //MCR
    PIT_Init(PIT, &pit_config);
//    PIT_SetTimerPeriod(PIT, kPIT_Chnl_0, CLOCK_GetBusClkFreq()*(1.5));
    /* Set timer period for channel 0 */
    PIT_SetTimerPeriod(PIT, kPIT_Chnl_0, USEC_TO_COUNT(1000000U, CLOCK_GetFreq(kCLOCK_BusClk)));
//    PIT_SetTimerPeriod(PIT, kPIT_Chnl_0, CLOCK_GetBusClkFreq());
    PIT_GetStatusFlags(PIT, kPIT_Chnl_0);
    PIT_StartTimer(PIT, kPIT_Chnl_0);
    PIT_EnableInterrupts(PIT, kPIT_Chnl_0, kPIT_TimerInterruptEnable);
    NVIC_EnableIRQ(PIT0_IRQn);
	DAC_config();

	vTaskDelete(NULL);

	while (1)
	{

		//	if (EVENT_BIT & xEventGroupGetBits(event)) {
		//		netbuf_copy(buf, ping, N);
		//		xEventGroupClearBits(event, EVENT_BIT);
		//	} else {
		//		netbuf_copy(buf, pong, N);
		//		xEventGroupSetBits(event, EVENT_BIT);
		//	}
//		DAC_SetBufferValue(DEMO_DAC_BASEADDR, 0U, DAC_1_0_VOLTS);
	}



}


 void audio_player_init(void)
{
	xTaskCreate(audio_player, "audio_player", configMINIMAL_STACK_SIZE, NULL, configMAX_PRIORITIES-1, NULL);
}



uint8_t counter = 0;
void PIT0_IRQHandler()
{
//	BaseType_t xHigherPriorityTaskWoken;

	PIT_ClearStatusFlags(PIT, kPIT_Chnl_0, kPIT_TimerFlag);
	counter++;
	PRINTF("\r\n%d\r\n", counter);
//en lugar de poner logica del DAC aqui, se pondra una bandera o semaforo
//	xHigherPriorityTaskWoken = pdFALSE;
//	xSemaphoreGiveFromISR( pitToogleSemaphore, &xHigherPriorityTaskWoken );
//	portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
}

